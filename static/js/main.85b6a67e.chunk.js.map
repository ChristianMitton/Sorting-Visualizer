{"version":3,"sources":["components/initial_setup/createDefaultGrid.js","dataStructures/GraphNode.js","algorithms/insertion_sort.js","algorithms/selection_sort.js","algorithms/bubblesort.js","algorithms/heapsort.js","components/Node/Node.js","components/SortingVisualizer.js","components/App.js","serviceWorker.js","index.js","components/initial_setup/copyObjects.js","components/initial_setup/loadArray.js"],"names":["GraphNode","require","default","createDefaultGrid","numRows","numCols","grid","row","currentRow","col","currentNode","push","value","this","active","isHighlighted","finished","insertionSort","arr","snapshots","i","length","key","j","slice","temp","getSmallest","startIdx","currentNum","tempMin","Number","POSITIVE_INFINITY","tempIdx","min","idx","console","log","selection_sort","num","bubblesort","array","stopPoint","Heap","heap","buildHeap","insert","target","siftUp","k","parent","Math","floor","swap","leftChildIdx","rightChildIdx","largestChildIdx","pop","biggestNum","newHead","siftDown","swapFooterNumWithEndIdx","footerNum","endOfArray","indexOfFooterNum","ptr","heapSort","maxHeap","endIdx","remove","Node","props","state","maxRows","extraClassName","isActive","className","Component","load_array","insertion_sort","heapsort","NUM_ROWS","NUM_COLS","SAMPLE_ARRAY","SortingVisualizer","handleArrayChange","event","setState","user_array","handleSubmit","preventDefault","userArray","replace","split","loadArray","handleSpeedChange","newSpeed","speed","max","apply","updatedGrid","arrayToUse","map","animateInsertion","animate_selection_sort","animateBubble","animateHeap","currArray","highlightCol","setTimeout","gridWithHighlight","currColHighlight","smallestNumPtrHighlight","footerNumToHighlight","highlightIdx","count","id","onSubmit","type","onChange","onClick","visualizeInsertion","visualizeSelectionSort","visualizeBubbleSort","visualizeHeapSort","rowIdx","node","nodeIdx","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","clone","obj","copy","constructor","attr","hasOwnProperty","fillCol","fillAmount","result","newRow","copiedObj","copy2dArrayOfObjects","populateGrid"],"mappings":"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","file":"static/js/main.85b6a67e.chunk.js","sourcesContent":["let GraphNode = require('../../dataStructures/GraphNode').default;\n\nfunction createDefaultGrid(numRows, numCols){\n    const grid = [];      \n    for (let row = 0; row < numRows; row++){\n        const currentRow = [];\n        for(let col = 0; col < numCols; col++) {                \n            const currentNode = new GraphNode(\".\", row, col);                              \n            \n            currentRow.push(currentNode);\n        }\n        grid.push(currentRow);\n        //! At this point, each index contains a graphNode\n    }\n    return grid;\n}\n\nexport default createDefaultGrid;","class GraphNode {\n    constructor(value, row, col){\n        this.value = value;\n        this.row = row;\n        this.col = col; \n        this.active = false;\n        this.isHighlighted = false;   \n        this.finished = false;\n    }\n}\n\nexport default GraphNode;","function insertionSort(arr){\n    let snapshots = []\n    \n    for (let i = 1; i < arr.length; i += 1) {        \n        //push tuple, with [arr, footerNumToHighlight] format         \n\n        let key = arr[i]\n        let j = i - 1\n        \n        //pushes tuple, with [arr, footerNumToHighlight] format           \n        snapshots.push([arr.slice(), key])\n        \n        while(j >= 0 && arr[j] > key){                                                \n            let temp = arr[j]\n            arr[j] = arr[j + 1]\n            arr[j + 1] = temp                       \n\n            j -= 1;                        \n            snapshots.push([arr.slice(), key])            \n        }        \n    }\n\n    return snapshots\n}\n\nexport default insertionSort;\n\n// let arr = [9,2,7,5,8,4,3,1,6]\n\n// let snapshots = insertionSort(arr)\n\n// console.log('array:')\n// console.log(arr)\n// console.log(`snapshots:`)\n// console.log(snapshots)\n","function selection_sort(arr){    \n    let snapshots = []\n    for (let i = 0; i < arr.length-1; i += 1) {\n        let num = arr[i]\n        \n        // let [min, idx] = getSmallest(arr, i + 1)             \n        let [min, idx] = getSmallest(arr, i + 1, snapshots, num)                \n        \n        if (min < num) {\n            let temp = arr[i]\n            arr[i] = arr[idx]\n            arr[idx] = temp\n        }        \n        //-1 means not to highlight any columns\n        console.log('pushing: ' + arr.slice() + ', -1, -1') \n        snapshots.push([arr.slice(), arr[i], arr[idx]])\n        \n    }\n    console.log('snapshots:')\n    console.log(snapshots)\n    return snapshots\n}\n\nfunction getSmallest(arr, startIdx, snapshots, currentNum) {\n    let tempMin = Number.POSITIVE_INFINITY;  \n    let tempIdx = Number.POSITIVE_INFINITY;  \n    let min = Number.POSITIVE_INFINITY;  \n    let idx = Number.POSITIVE_INFINITY;   \n    \n    //For visual purposes, find the min first. Mark it.\n    for (let i = startIdx; i < arr.length; i += 1){                    \n        \n        if(arr[i] < tempMin){\n            tempMin = arr[i]\n            tempIdx = i\n        } \n    }    \n\n    for (let i = startIdx; i < arr.length; i += 1){    \n        //[snapshot_of_arr, current_num_being_inspected, ptr_looking_for_smalest_num]   \n        console.log('pushing: ' + arr.slice() + ', ' + currentNum + ', ' + arr[i]) \n\n        if(!(i > tempIdx)){\n            snapshots.push([arr.slice(), currentNum, arr[i]])            \n            // break\n        }\n        if(arr[i] < min){\n            min = arr[i]\n            idx = i\n        } \n    }    \n\n    return [min,idx]\n}\n\nexport default selection_sort;\n\n// let arr = [9,2,7,5,8,4,3,1,6]\n\n// console.log('beofre sort: ' + arr)\n\n// arr = selection_sort(arr)\n\n// console.log('beofre sort: ' + arr)\n","function bubblesort(array){\n    console.log('original array: ' + array)\n    let stopPoint = array.length\n    let snapshots = []\n\n    while(stopPoint > 0){\n        for(let i = 1; i < stopPoint; i += 1){            \n\n            let key = array[i]\n            let j = i - 1                                \n            \n            if(array[j] > key){                \n                snapshots.push([array.slice(), key])\n                let temp = array[j]\n                array[j] = array[i]\n                array[i] = temp                                                \n            }            \n            snapshots.push([array.slice(), key])\n            console.log(array)                            \n        }\n        stopPoint -= 1\n        // console.log('stopPoint: ' + stopPoint)\n        // console.log('End of iteration')\n    }    \n\n    console.log('new array: ' + array)    \n    return snapshots\n}\n\nexport default bubblesort;\n\nlet arr = [9,2,7,5,10,8,4,3,1,6]\n// arr = [5,8,1,6,9,2]\n\nbubblesort(arr)","class Heap{\n    constructor(array){\n        this.array = array\n        this.heap = []\n        this.buildHeap()\n    }\n\n    buildHeap(){\n        for(let i = 0; i < this.array.length; i += 1){\n            this.insert(this.array[i])\n        }\n    }\n\n\n    insert(target){\n        this.heap.push(target)        \n        this.siftUp()        \n    }\n\n    siftUp(){\n        // parent = k/2\n        // left = (2 * k) + 1\n        // right = (2 * k) + 2\n        let k = this.heap.length-1\n\n        // console.log(`k: ${k}`)\n\n        while(k !== 0){\n            let parent = Math.floor(k/2)\n            if(this.heap[parent] < this.heap[k]){\n                //swap parent and child\n                this.swap(parent, k)\n                k = parent                \n            } else {\n                break\n            }\n        }\n    }  \n\n    siftDown(){\n        // parent = k/2\n        // left = (2 * k) + 1\n        // right = (2 * k) + 2\n        let k = 0\n\n        // console.log(`   sifting down with ${this.heap[k]} as target`)\n\n        let leftChildIdx = (2 * k) + 1\n        let rightChildIdx = (2 * k) + 2\n\n        while(leftChildIdx < this.heap.length){            \n            let largestChildIdx = leftChildIdx\n            if(this.heap[rightChildIdx] > this.heap[leftChildIdx]){\n                largestChildIdx = rightChildIdx\n            }            \n            \n            if(this.heap[largestChildIdx] > this.heap[k]){\n                this.swap(k, largestChildIdx)\n            } else {\n                break\n            }\n            k = largestChildIdx\n\n            leftChildIdx = (2 * k) + 1\n            rightChildIdx = (2 * k) + 2\n        }\n    }\n\n    swap(i, j){\n        let temp = this.heap[i]\n        this.heap[i] = this.heap[j]\n        this.heap[j] = temp        \n    }  \n\n    remove(){                \n        if(this.heap.length === 0){\n            return false\n        } else if(this.heap.length === 1){\n            return this.heap.pop()\n        } else {\n            let biggestNum = this.heap[0]        \n\n            let newHead = this.heap.pop()\n            this.heap[0] = newHead\n            this.siftDown()\n\n            // console.log('returning ' + biggestNum + ', heap: [' + this.heap + ']')\n            // console.log('returning ' + biggestNum)\n            return biggestNum\n        }\n\n    }                   \n}\n\nfunction heapSort(array){\n    let maxHeap = new Heap(array)    \n    // let result = []    \n    let snapshots = []\n\n    let endIdx = array.length-1\n\n    // snapshots.push(array.slice())\n    // console.log(`new snapshot: ${array.slice()}`)\n\n    let i = 0\n    while(i < array.length){    \n    // array.forEach(element => {\n        let biggestNum = maxHeap.remove()\n        snapshots.push([array.slice(), biggestNum, biggestNum])\n        swapFooterNumWithEndIdx(array, biggestNum, endIdx)\n        // snapshots.push(array.slice())\n        snapshots.push([array.slice(), biggestNum, biggestNum])\n        // console.log(`> new snapshot: [${array.slice()}] - ${biggestNum}`)\n        endIdx -= 1\n        // result.unshift(biggestNum)\n    // });    \n        i += 1\n    }\n\n    return snapshots\n    // return result\n}\n\nfunction swapFooterNumWithEndIdx(array, footerNum, endOfArray){\n    let indexOfFooterNum = -1\n\n    //Get indexOfFooterNum in array\n    let ptr = 0\n    while(ptr < endOfArray){\n        if(array[ptr] === footerNum){\n            indexOfFooterNum = ptr\n        }\n        ptr += 1\n    }\n    \n    //swap indexOfFooterNum with end of array\n    if(indexOfFooterNum !== -1){\n        console.log(`swapping ${array[indexOfFooterNum]} with ${array[endOfArray]}`)\n        swap(array, indexOfFooterNum, endOfArray)\n    }\n}\n\nfunction swap(array, i, j){\n    let temp = array[i]\n    array[i] = array[j]\n    array[j] = temp        \n}  \n\n\nexport default heapSort;\n\n// let a = [16,24,5,11,2,3,5,1,25]\n// a = [ 9 , 2 , 7 , 5 , 10, 8 , 4 , 3 , 1 , 6, ]\n// console.log(`array: ${a}`)\n\n// let arrAsHeap = new Heap(a)\n\n// console.log(`converted to heap: ${arrAsHeap.heap}`)\n\n// // console.log(arrAsHeap.remove())\n\n// // console.log(`after remove: ${arrAsHeap.heap}`)\n\n// console.log()\n// let snapshots = heapSort(arrAsHeap.heap)\n\n// console.log('snapshots:')\n// console.log(snapshots)\n// // console.log(`Sorted : ${res}`)\n","import React, { Component } from 'react';\n\nimport './styles.css';\n\nclass Node extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            \n        };\n    }\n\n    render() {\n        const {\n            value, \n            row, \n            // col, \n            maxRows,\n            isActive,\n            isHighlighted\n        } = this.props;        \n        //? assign class depending on value passed to prop using terinary operator\n        //! <true/false statement> ? <if true, this runs> : <if false, this runs> ;\n        // const extraClassName = isStart \n        // ? 'node-start' \n        // : isFinish \n        // ? 'node-finish'\n        // : visited\n        // ? 'node-visited'\n        // : isWall\n        // ? 'node-wall'\n        // : \"\";\n        // console.log(`row:${row}, col:${col}, maxRows:${maxRows}`)\n        let extraClassName = ''        \n\n        let secondToLastRow = maxRows-2;\n        let lastRow = maxRows-1;        \n\n        if (row === secondToLastRow){\n            extraClassName = 'bar'                        \n        }        \n        \n        if (row === lastRow){\n            extraClassName = 'footer'                        \n        }\n\n        if (isActive){\n            extraClassName += ' active'\n        }\n\n        if (isHighlighted){\n            extraClassName += ' highlighted'\n        }\n\n        return (\n            //assigning multiple classNames to a Node            \n            <div className={`node ${extraClassName}`}>\n                    {value}                    \n            </div>\n        )\n    }\n}\n\nexport default Node;\n// export const DEFAULT_NODE = {\n//     row: 0,\n//     col: 0,\n// };\n\n/*\n    onMouseDown happens when you press you're mouse button, not when you release it\n    onMouseUp happens when you release\n    onClick happens when you press and release    \n    mouseEnter happens when you hover above an element\n*/","import React, { Component } from 'react';\nimport Node from './Node/Node';\n// import Form from './Form';\nimport '../styles/styles.css';\n\n// import { clone, copy2dArrayOfObjects, modify } from './initial_setup/copyObjects';\n\n// let GraphNode = require('../dataStructures/GraphNode').default;\nlet createDefaultGrid = require('./initial_setup/createDefaultGrid').default;\nlet load_array = require('./initial_setup/loadArray').default;\n\nlet insertion_sort = require('../algorithms/insertion_sort').default;\nlet mergesort = require('../algorithms/mergesort').default;\n// let quicksort = require('../algorithms/quicksort').default;\nlet selection_sort = require('../algorithms/selection_sort').default;\nlet bubblesort = require('../algorithms/bubblesort').default;\nlet heapsort = require('../algorithms/heapsort').default;\n\nlet NUM_ROWS = 20\nlet NUM_COLS = 10\nlet SAMPLE_ARRAY = [ 9 , 2 , 7 , 5 , 10, 8 , 4 , 3 , 1 , 6, ]\n\n//! HAVE BUTTON THAT SAYS: 'generate array of length {length_of_array}'\n\nclass SortingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [],\n            user_array: [],\n            speed: 500\n        };\n    }\n\n    componentDidMount() {\n      // create grid when component is first rendered\n      //? '+ 2' accounts for bar and footer  \n      NUM_ROWS = Math.max.apply(null, SAMPLE_ARRAY) + 2\n      NUM_COLS = SAMPLE_ARRAY.length\n\n      let grid = createDefaultGrid(NUM_ROWS, NUM_COLS);\n\n      grid = load_array(grid, SAMPLE_ARRAY, NUM_ROWS, NUM_COLS)\n      \n      this.setState({\n          grid: grid          \n      });\n    }\n\n    loadArray(array) {           \n\n      NUM_ROWS = Math.max.apply(null, array) + 2\n      NUM_COLS = array.length\n\n      let updatedGrid = createDefaultGrid(NUM_ROWS, NUM_COLS)\n      \n      updatedGrid = load_array(updatedGrid, array, NUM_ROWS, NUM_COLS)      \n      \n      this.setState ({\n        grid: updatedGrid\n      })\n    }  \n\n    //? ----------------------------------------------------------------\n    //? ---------------------------- FORMS  ----------------------------\n    //? ----------------------------------------------------------------\n\n    handleArrayChange = (event) => {\n      let arr = event.target.value\n      this.setState({\n          user_array: arr\n      })\n    }\n\n    handleSubmit = event => {\n        // alert(`${this.state.user_array}`)\n        event.preventDefault()\n        //let userArray = Array.from(this.state.user_array)\n\n        let userArray = this.state.user_array.replace(/\\s/g, '').split(',')\n\n        this.loadArray(userArray)\n    }\n\n    handleSpeedChange = (event) => {\n      let newSpeed = event.target.value\n      console.log(newSpeed)\n      this.setState({\n        speed: newSpeed\n      })\n    }\n\n    //? ----------------------------------------------------------------\n    //? ------------------------ VISUALIZATION  ------------------------ \n    //? ----------------------------------------------------------------\n\n    visualizeInsertion(){\n      let arrayToUse = [1]\n      //If the user array hasn't been filled, default to sample array\n      if (this.state.user_array.length !== 0){\n        arrayToUse = this.state.user_array.split(',').map(Number)\n      } else {\n        arrayToUse = SAMPLE_ARRAY\n      }\n            \n      let snapshots = insertion_sort(arrayToUse)\n      \n      this.animateInsertion(snapshots)\n\n    }\n\n    visualizeSelectionSort(){\n      let arrayToUse = []\n      //If the user array hasn't been filled, default to sample array\n      if (this.state.user_array.length !== 0){\n        arrayToUse = this.state.user_array.split(',').map(Number)\n      } else {\n        arrayToUse = SAMPLE_ARRAY\n      }\n\n      let snapshots = selection_sort(arrayToUse)\n\n      this.animate_selection_sort(snapshots)      \n    }\n\n    visualizeBubbleSort(){\n      let arrayToUse = [1]\n      //If the user array hasn't been filled, default to sample array\n      if (this.state.user_array.length !== 0){\n        arrayToUse = this.state.user_array.split(',').map(Number)\n      } else {\n        arrayToUse = SAMPLE_ARRAY\n      }\n            \n      let snapshots = bubblesort(arrayToUse)\n      \n      this.animateBubble(snapshots)\n    }\n\n    visualizeHeapSort(){\n      let arrayToUse = [1]\n      //If the user array hasn't been filled, default to sample array\n      if (this.state.user_array.length !== 0){\n        arrayToUse = this.state.user_array.split(',').map(Number)\n      } else {\n        arrayToUse = SAMPLE_ARRAY\n      }\n            \n      let snapshots = heapsort(arrayToUse)\n      \n      this.animateHeap(snapshots)\n    }\n\n    //? ----------------------------------------------------------------\n    //? ------------------------ Animation  ----------------------------\n    //? ----------------------------------------------------------------\n\n    animateInsertion(snapshots) {\n      //snapshots is the following format: [array, footer_num_to_be_highlighted] \n      for(let i in snapshots){\n        let currArray = snapshots[i][0]\n        let highlightCol =  snapshots[i][1]\n        \n        setTimeout(() => {            \n\n          //handle current 'picture' of grid\n          this.loadArray(currArray) \n\n          //handle current highlighted column\n          NUM_ROWS = Math.max.apply(null, currArray) + 2\n          NUM_COLS = currArray.length\n          let gridWithHighlight = this.state.grid            \n          gridWithHighlight = this.highlightCol(gridWithHighlight, highlightCol, NUM_ROWS, NUM_COLS)\n\n          this.setState ({\n            grid: gridWithHighlight\n          })\n        \n          \n        }, this.state.speed * i)\n        // }, 5000 * i)\n      }\n    }  \n\n    animateBubble(snapshots){\n      //snapshots is the following format: [array, footer_num_to_be_highlighted] \n      for(let i in snapshots){\n        let currArray = snapshots[i][0]\n        let highlightCol =  snapshots[i][1]\n        \n        setTimeout(() => {            \n\n          //handle current 'picture' of grid\n          this.loadArray(currArray) \n\n          //handle current highlighted column\n          NUM_ROWS = Math.max.apply(null, currArray) + 2\n          NUM_COLS = currArray.length\n          let gridWithHighlight = this.state.grid            \n          gridWithHighlight = this.highlightCol(gridWithHighlight, highlightCol, NUM_ROWS, NUM_COLS)\n\n          this.setState ({\n            grid: gridWithHighlight\n          })        \n          \n        }, this.state.speed * i)\n        // }, 5000 * i)\n      }\n    }\n\n    animate_selection_sort(snapshots) {\n      //snapshots is the following format: [array, currentNumber, smallestNumberPtr] \n      for(let i in snapshots){\n        let currArray = snapshots[i][0]\n        let currColHighlight =  snapshots[i][1]\n        let smallestNumPtrHighlight =  snapshots[i][2]\n\n        setTimeout(() => {            \n          console.log('>     currColHighlight: ' + currColHighlight)\n          console.log('>     smallestNumPtrHighlight: ' + smallestNumPtrHighlight)\n\n          //handle current 'picture' of grid\n          this.loadArray(currArray) \n\n          //handle currColHighlight\n          if(currColHighlight !== -1){\n            NUM_ROWS = Math.max.apply(null, currArray) + 2\n            NUM_COLS = currArray.length\n\n            let gridWithHighlight = this.state.grid            \n            gridWithHighlight = this.highlightCol(gridWithHighlight, currColHighlight, NUM_ROWS, NUM_COLS)\n\n            this.setState ({\n              grid: gridWithHighlight\n            })     \n          }\n          //handle smallestNumPtrHighlight\n          if(smallestNumPtrHighlight !== -1){\n            NUM_ROWS = Math.max.apply(null, currArray) + 2\n            NUM_COLS = currArray.length\n\n            let gridWithHighlight = this.state.grid            \n            gridWithHighlight = this.highlightCol(gridWithHighlight, smallestNumPtrHighlight, NUM_ROWS, NUM_COLS)\n\n            this.setState ({\n              grid: gridWithHighlight\n            })     \n          }\n          \n        }, this.state.speed * i)\n      }\n    }    \n\n    animateHeap(snapshots){\n      //snapshots is the following format: [array, footer_num_to_be_highlighted] \n      //snapshots is the following format: [array, currentNumber, smallestNumberPtr] \n      for(let i in snapshots){\n        let currArray = snapshots[i][0]\n        let currColHighlight =  snapshots[i][1]\n        let smallestNumPtrHighlight =  snapshots[i][2]\n\n        setTimeout(() => {            \n          console.log('>     currColHighlight: ' + currColHighlight)\n          console.log('>     smallestNumPtrHighlight: ' + smallestNumPtrHighlight)\n\n          //handle current 'picture' of grid\n          this.loadArray(currArray) \n\n          //handle currColHighlight\n          if(currColHighlight !== -1){\n            NUM_ROWS = Math.max.apply(null, currArray) + 2\n            NUM_COLS = currArray.length\n\n            let gridWithHighlight = this.state.grid            \n            gridWithHighlight = this.highlightCol(gridWithHighlight, currColHighlight, NUM_ROWS, NUM_COLS)\n\n            this.setState ({\n              grid: gridWithHighlight\n            })     \n          }\n          //handle smallestNumPtrHighlight\n          if(smallestNumPtrHighlight !== -1){\n            NUM_ROWS = Math.max.apply(null, currArray) + 2\n            NUM_COLS = currArray.length\n\n            let gridWithHighlight = this.state.grid            \n            gridWithHighlight = this.highlightCol(gridWithHighlight, smallestNumPtrHighlight, NUM_ROWS, NUM_COLS)\n\n            this.setState ({\n              grid: gridWithHighlight\n            })     \n          }\n          \n        }, this.state.speed * i)\n      }\n    }\n\n    highlightCol(grid, footerNumToHighlight, numRows, numCols){  \n\n        //get idx of footerNumToHighlight        \n        let highlightIdx = 0\n        // let r = numRows-1\n        let count = 0\n                \n        while(count < numCols){                  \n          if(grid[numRows-1][count].value === footerNumToHighlight){                        \n            highlightIdx = count\n            break\n          }\n          count += 1\n        }\n\n        //Use idx to highlight the specific column\n        count = 0\n        let row = numRows-3      \n\n        while(count < footerNumToHighlight && row >= 0) {\n          \n          grid[row][highlightIdx].isHighlighted = true                        \n\n          count += 1\n          row -= 1          \n        }\n          \n        return grid\n    }\n\n    //? ----------------------------------------------------------------\n    //? ---------------------------- RENDER ---------------------------- \n    //? ----------------------------------------------------------------\n\n    render(){     \n      const {grid} = this.state;  \n      // let cols = new Array(NUM_COLS).fill(0)\n\n      let id = 0;\n      \n      return (\n          <div className=\"whole_page form\">             \n            <form onSubmit={this.handleSubmit}>\n                <div>\n                    <label>Enter comma seperated numbers (e.g. 9,2,7,5,10,8,4,3,1,6) <br></br></label>                                        \n                    <input type='text' value={this.state.user_array} onChange={this.handleArrayChange}/>\n                    <button type=\"submit\">Enter</button>       \n                </div>                         \n            </form>  \n\n            <form onSubmit={this.handleSubmit}>\n                <div>\n                    <label>Adjust speed: </label>                                        \n                    <input type='range' min='30' max='1000' className='reverse-slider' value={this.state.speed} onChange={this.handleSpeedChange}/>\n                    {/* <button type=\"submit\">Enter</button>        */}\n                </div>                         \n            </form>  \n\n            <button onClick={() => this.visualizeInsertion()}>\n              Insertion Sort\n            </button>\n\n            <button onClick={() => this.visualizeSelectionSort()}>\n              Selection Sort\n            </button>\n\n            <button onClick={() => this.visualizeBubbleSort()}>\n              Bubble Sort\n            </button>\n\n            <button onClick={() => this.visualizeHeapSort()}>\n              Heap Sort\n            </button>            \n\n            <div className=\"grid\">            \n              {grid.map( (row, rowIdx) => {\n                return (\n                  <div key={rowIdx}>\n                    {row.map((node, nodeIdx) => {                                \n                      // obtaing the current node and create a div for it\n                      const {value, row, col, active, isHighlighted} = node;\n                      //TODO: if at the last row, figure out how to add numbers\n                      if (row === NUM_ROWS - 1) {\n\n                      }\n                      return (\n                        <Node \n                            key={id++} \n                            value={value}\n                            row={row}\n                            col={col}\n                            maxRows={NUM_ROWS}\n                            isActive={active}\n                            isHighlighted={isHighlighted}\n                        />\n                      )\n                    }) }                            \n                  </div>\n                )\n              })}                \n            </div>\n          </div>\n      )\n    }\n}\n\nexport default SortingVisualizer;","import React from 'react';\n// import logo from '../logo.svg';\nimport '../styles/default.css';\nimport SortingVisualizer from './SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">          \n      <SortingVisualizer />      \n    </div>\n  );\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n// import './index.css';\n\n//! Here is where the App component is being called\nReactDOM.render(<App />, document.getElementById('root'));\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function clone(obj) {\n    if (null == obj || \"object\" != typeof obj) return obj;\n    let copy = new obj.constructor();\n    for (let attr in obj) {\n        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n    }\n    return copy;\n}\n\nfunction copy2dArrayOfObjects(array){\n    let result = []\n    for(let row in array){\n        let newRow = []\n        for(let col in array[row]){\n            let copiedObj = clone(array[row][col]);\n            newRow.push(copiedObj);\n        }\n        result.push(newRow);\n    }\n\n    return result;\n}\n\nfunction modify(obj, newObj) {\n\n    Object.keys(obj).forEach(function(key) {\n      delete obj[key];\n    });\n  \n    Object.keys(newObj).forEach(function(key) {\n      obj[key] = newObj[key];\n    });\n    \n  }\n\n\n// module.exports.copy2dArrayOfObjects = copy2dArrayOfObjects;\n// module.exports.clone = clone;\n// module.exports.modify = modify;\n\nexport {\n  copy2dArrayOfObjects,\n  modify,\n  clone\n}","// import { clone, copy2dArrayOfObjects, modify } from './copyObjects';\nimport { copy2dArrayOfObjects } from './copyObjects';\n// import GraphNode from '../../dataStructures/GraphNode';\n\nfunction loadArray(grid, arr, numRows, numCols) {      \n    let updatedGrid = copy2dArrayOfObjects(grid)   \n\n    //Populate active cols using input array\n    updatedGrid = populateGrid(updatedGrid, arr, numRows, numCols)              \n\n    return updatedGrid\n  }\n\n  function populateGrid(grid, arr, numRows, numCols) {    \n    // updatedGrid[4][4].active = true;\n    // let endOfArr = numRows-2          \n    let col = 0\n    while(col < numCols){\n            \n      let currentNum = arr[col]\n\n      grid = fillCol(grid, col, currentNum, numRows, numCols)\n      col += 1\n    }      \n    return grid\n\n  }\n\n  function fillCol(grid, col, fillAmount, numRows, numCols){         \n    let count = 0\n    let row = numRows-2          \n    \n    while(count <= fillAmount) {      \n      grid[row][col].active = true      \n      // write number to footer\n      grid[numRows-1][col].value = fillAmount\n\n      row -= 1\n      count += 1\n    }\n\n    return grid\n  }\n\n  export default loadArray;"],"sourceRoot":""}